{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed Sehly\\\\Downloads\\\\cipherPlain-main\\\\cipherPlain-main\\\\src\\\\components\\\\CipherForm.js\";\nimport React, { useState } from \"react\";\nimport { TextField, Button, Box, Typography, Paper, Radio, RadioGroup, FormControl, FormControlLabel, Grid, Grow } from \"@mui/material\";\nimport { encrypt as aesEncrypt, decrypt as aesDecrypt, byteArrayToHexString, hexStringToByteArray } from \"../algorithms/AES/aes\";\nimport EncryptionSteps from \"./EncryptionSteps\";\nfunction CipherForm() {\n  const [key, setKey] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [mode, setMode] = useState(\"encrypt\");\n  const [encryptionSteps, setEncryptionSteps] = useState([]);\n  const [activeStep, setActiveStep] = useState(0);\n  const bitSize = 128;\n  const isHexString = str => {\n    const hexRegEx = /^[0-9a-fA-F]+$/;\n    return hexRegEx.test(str.replace(/\\s+/g, \"\")); // Ignore spaces when testing for valid hex string\n  };\n  const stringToHex = str => {\n    return str.split(\"\").map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\"\");\n  };\n  const hexToString = hex => {\n    return hex.match(/.{1,2}/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join(\"\");\n  };\n  const handleEncrypt = () => {\n    let inputText = text.trim();\n    let flag = false;\n    // Convert text to hex if it's not already in hex format\n    if (!isHexString(inputText)) {\n      flag = true;\n      inputText = stringToHex(inputText);\n    }\n    let inputKey = key.trim();\n    // Convert key to hex if it's not already in hex format\n    if (!isHexString(inputKey)) {\n      inputKey = stringToHex(inputKey);\n    }\n    let output;\n    if (mode === \"encrypt\") {\n      const result = aesEncrypt(inputText, inputKey);\n      output = result.ciphertext;\n      setEncryptionSteps(result.steps);\n    } else {\n      output = aesDecrypt(inputText, inputKey);\n    }\n    if (flag) {\n      setResult(hexToString(output));\n    } else {\n      setResult(output);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      width: \"100%\",\n      p: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"AES Encryption\"), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Input Text\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    fullWidth: true,\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Key\",\n    value: key,\n    onChange: e => setKey(e.target.value),\n    fullWidth: true,\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    row: true,\n    value: mode,\n    onChange: e => setMode(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"encrypt\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 22\n      }\n    }),\n    label: \"Encrypt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"decrypt\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }\n    }),\n    label: \"Decrypt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleEncrypt,\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, mode === \"encrypt\" ? \"Encrypt\" : \"Decrypt\"), result && /*#__PURE__*/React.createElement(Paper, {\n    sx: {\n      mt: 4,\n      p: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Result\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, result)), encryptionSteps.length > 0 && /*#__PURE__*/React.createElement(EncryptionSteps, {\n    steps: encryptionSteps,\n    activeStep: activeStep,\n    setActiveStep: setActiveStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }));\n}\nexport default CipherForm;","map":{"version":3,"names":["React","useState","TextField","Button","Box","Typography","Paper","Radio","RadioGroup","FormControl","FormControlLabel","Grid","Grow","encrypt","aesEncrypt","decrypt","aesDecrypt","byteArrayToHexString","hexStringToByteArray","EncryptionSteps","CipherForm","key","setKey","text","setText","result","setResult","mode","setMode","encryptionSteps","setEncryptionSteps","activeStep","setActiveStep","bitSize","isHexString","str","hexRegEx","test","replace","stringToHex","split","map","c","charCodeAt","toString","padStart","join","hexToString","hex","match","byte","String","fromCharCode","parseInt","handleEncrypt","inputText","trim","flag","inputKey","output","ciphertext","steps","createElement","sx","width","p","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","label","value","onChange","e","target","fullWidth","margin","component","mt","row","control","color","onClick","length"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/components/CipherForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Paper,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Grow,\n} from \"@mui/material\";\nimport {\n  encrypt as aesEncrypt,\n  decrypt as aesDecrypt,\n  byteArrayToHexString,\n  hexStringToByteArray,\n} from \"../algorithms/AES/aes\";\nimport EncryptionSteps from \"./EncryptionSteps\";\n\nfunction CipherForm() {\n  const [key, setKey] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [mode, setMode] = useState(\"encrypt\");\n  const [encryptionSteps, setEncryptionSteps] = useState([]);\n  const [activeStep, setActiveStep] = useState(0);\n  const bitSize = 128;\n\n  const isHexString = (str) => {\n    const hexRegEx = /^[0-9a-fA-F]+$/;\n    return hexRegEx.test(str.replace(/\\s+/g, \"\")); // Ignore spaces when testing for valid hex string\n  };\n\n  const stringToHex = (str) => {\n    return str\n      .split(\"\")\n      .map((c) => c.charCodeAt(0).toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  };\n\n  const hexToString = (hex) => {\n    return hex\n      .match(/.{1,2}/g)\n      .map((byte) => String.fromCharCode(parseInt(byte, 16)))\n      .join(\"\");\n  };\n\n  const handleEncrypt = () => {\n    let inputText = text.trim();\n    let flag = false;\n    // Convert text to hex if it's not already in hex format\n    if (!isHexString(inputText)) {\n      flag = true;\n      inputText = stringToHex(inputText);\n    }\n\n    let inputKey = key.trim();\n    // Convert key to hex if it's not already in hex format\n    if (!isHexString(inputKey)) {\n      inputKey = stringToHex(inputKey);\n    }\n\n    let output;\n    if (mode === \"encrypt\") {\n      const result = aesEncrypt(inputText, inputKey);\n      output = result.ciphertext;\n      setEncryptionSteps(result.steps);\n    } else {\n      output = aesDecrypt(inputText, inputKey);\n    }\n\n    if (flag) {\n      setResult(hexToString(output));\n    } else {\n      setResult(output);\n    }\n  };\n\n  return (\n    <Box sx={{ width: \"100%\", p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        AES Encryption\n      </Typography>\n      <TextField\n        label=\"Input Text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        fullWidth\n        margin=\"normal\"\n      />\n      <TextField\n        label=\"Key\"\n        value={key}\n        onChange={(e) => setKey(e.target.value)}\n        fullWidth\n        margin=\"normal\"\n      />\n      <FormControl component=\"fieldset\" sx={{ mt: 2 }}>\n        <RadioGroup row value={mode} onChange={(e) => setMode(e.target.value)}>\n          <FormControlLabel\n            value=\"encrypt\"\n            control={<Radio />}\n            label=\"Encrypt\"\n          />\n          <FormControlLabel\n            value=\"decrypt\"\n            control={<Radio />}\n            label=\"Decrypt\"\n          />\n        </RadioGroup>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleEncrypt}\n        sx={{ mt: 2 }}\n      >\n        {mode === \"encrypt\" ? \"Encrypt\" : \"Decrypt\"}\n      </Button>\n      {result && (\n        <Paper sx={{ mt: 4, p: 3 }}>\n          <Typography variant=\"h6\">Result</Typography>\n          <Typography variant=\"body1\">{result}</Typography>\n        </Paper>\n      )}\n      {encryptionSteps.length > 0 && (\n        <EncryptionSteps\n          steps={encryptionSteps}\n          activeStep={activeStep}\n          setActiveStep={setActiveStep}\n        />\n      )}\n    </Box>\n  );\n}\n\nexport default CipherForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}