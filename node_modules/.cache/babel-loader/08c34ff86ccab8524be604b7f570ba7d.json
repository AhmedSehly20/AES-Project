{"ast":null,"code":"import AES from \"./aes_class\"; // Assuming the AES class is defined as shown previously\n\nexport function hexStringToByteArray(hexString) {\n  const byteArray = [];\n  for (let i = 0; i < hexString.length; i += 2) {\n    byteArray.push(parseInt(hexString.substr(i, 2), 16));\n  }\n  return byteArray;\n}\nexport function byteArrayToHexString(byteArray) {\n  return byteArray.map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nexport function encrypt(plaintextHex, keyHex) {\n  const plaintextBytes = hexStringToByteArray(plaintextHex);\n  const keyBytes = hexStringToByteArray(keyHex);\n  const aes = new AES(keyBytes);\n  const encryptedBytes = aes.encrypt(plaintextBytes);\n  return byteArrayToHexString(encryptedBytes);\n}\nexport function decrypt(ciphertextHex, keyHex) {\n  const ciphertextBytes = hexStringToByteArray(ciphertextHex);\n  const keyBytes = hexStringToByteArray(keyHex);\n  const aes = new AES(keyBytes);\n  const decryptedBytes = aes.decrypt(ciphertextBytes);\n  return byteArrayToHexString(decryptedBytes);\n}","map":{"version":3,"names":["AES","hexStringToByteArray","hexString","byteArray","i","length","push","parseInt","substr","byteArrayToHexString","map","byte","toString","padStart","join","encrypt","plaintextHex","keyHex","plaintextBytes","keyBytes","aes","encryptedBytes","decrypt","ciphertextHex","ciphertextBytes","decryptedBytes"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/algorithms/AES/aes.js"],"sourcesContent":["import AES from \"./aes_class\"; // Assuming the AES class is defined as shown previously\n\nexport function hexStringToByteArray(hexString) {\n  const byteArray = [];\n  for (let i = 0; i < hexString.length; i += 2) {\n    byteArray.push(parseInt(hexString.substr(i, 2), 16));\n  }\n  return byteArray;\n}\n\nexport function byteArrayToHexString(byteArray) {\n  return byteArray.map((byte) => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nexport function encrypt(plaintextHex, keyHex) {\n  const plaintextBytes = hexStringToByteArray(plaintextHex);\n  const keyBytes = hexStringToByteArray(keyHex);\n\n  const aes = new AES(keyBytes);\n  const encryptedBytes = aes.encrypt(plaintextBytes);\n\n  return byteArrayToHexString(encryptedBytes);\n}\n\nexport function decrypt(ciphertextHex, keyHex) {\n  const ciphertextBytes = hexStringToByteArray(ciphertextHex);\n  const keyBytes = hexStringToByteArray(keyHex);\n\n  const aes = new AES(keyBytes);\n  const decryptedBytes = aes.decrypt(ciphertextBytes);\n\n  return byteArrayToHexString(decryptedBytes);\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa,CAAC,CAAC;;AAE/B,OAAO,SAASC,oBAAoBA,CAACC,SAAS,EAAE;EAC9C,MAAMC,SAAS,GAAG,EAAE;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC5CD,SAAS,CAACG,IAAI,CAACC,QAAQ,CAACL,SAAS,CAACM,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACtD;EACA,OAAOD,SAAS;AAClB;AAEA,OAAO,SAASM,oBAAoBA,CAACN,SAAS,EAAE;EAC9C,OAAOA,SAAS,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAC7E;AAEA,OAAO,SAASC,OAAOA,CAACC,YAAY,EAAEC,MAAM,EAAE;EAC5C,MAAMC,cAAc,GAAGjB,oBAAoB,CAACe,YAAY,CAAC;EACzD,MAAMG,QAAQ,GAAGlB,oBAAoB,CAACgB,MAAM,CAAC;EAE7C,MAAMG,GAAG,GAAG,IAAIpB,GAAG,CAACmB,QAAQ,CAAC;EAC7B,MAAME,cAAc,GAAGD,GAAG,CAACL,OAAO,CAACG,cAAc,CAAC;EAElD,OAAOT,oBAAoB,CAACY,cAAc,CAAC;AAC7C;AAEA,OAAO,SAASC,OAAOA,CAACC,aAAa,EAAEN,MAAM,EAAE;EAC7C,MAAMO,eAAe,GAAGvB,oBAAoB,CAACsB,aAAa,CAAC;EAC3D,MAAMJ,QAAQ,GAAGlB,oBAAoB,CAACgB,MAAM,CAAC;EAE7C,MAAMG,GAAG,GAAG,IAAIpB,GAAG,CAACmB,QAAQ,CAAC;EAC7B,MAAMM,cAAc,GAAGL,GAAG,CAACE,OAAO,CAACE,eAAe,CAAC;EAEnD,OAAOf,oBAAoB,CAACgB,cAAc,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module"}