{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed Sehly\\\\Downloads\\\\cipherPlain-main\\\\cipherPlain-main\\\\src\\\\components\\\\ElGamal_Form.js\";\nimport React, { useState } from 'react';\nimport { TextField, Button, Box, Typography, Paper, Grid, Grow, Tooltip, IconButton } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { elGamalEncrypt, elGamalDecrypt } from '../algorithms/elgamal.js';\nfunction ElGamalForm() {\n  const [alice, setAlice] = useState({\n    p: '',\n    g: '',\n    x: ''\n  });\n  const [bob, setBob] = useState({\n    r: '',\n    m: ''\n  });\n  const [publicKey, setPublicKey] = useState({\n    p: '',\n    g: '',\n    h: ''\n  });\n  const [encryptedMessage, setEncryptedMessage] = useState({\n    c1: '',\n    c2: ''\n  });\n  const [decryptedMessage, setDecryptedMessage] = useState('');\n  const [messageReceived, setMessageReceived] = useState(false);\n  const [publicKeyGenerated, setPublicKeyGenerated] = useState(false);\n  const [errors, setErrors] = useState({});\n  const handleAliceChange = e => {\n    setAlice({\n      ...alice,\n      [e.target.name]: e.target.value\n    });\n    validateField(e.target.name, e.target.value);\n  };\n  const handleBobChange = e => {\n    setBob({\n      ...bob,\n      [e.target.name]: e.target.value\n    });\n    validateField(e.target.name, e.target.value);\n  };\n  const validateField = (name, value) => {\n    let newErrors = {\n      ...errors\n    };\n    switch (name) {\n      case 'p':\n        newErrors.p = !isPrime(parseInt(value)) ? 'Must be a prime number' : '';\n        break;\n      case 'g':\n        if (alice.p && value) {\n          newErrors.g = !isPrimitiveRoot(parseInt(value), parseInt(alice.p)) ? 'g is not a primitive root modulo p' : '';\n        }\n        break;\n      case 'x':\n      case 'r':\n      case 'm':\n        newErrors[name] = !value || isNaN(value) ? 'Must be a number' : '';\n        break;\n      default:\n        break;\n    }\n    setErrors(newErrors);\n  };\n  const isPrime = num => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++) if (num % i === 0) return false;\n    return num > 1;\n  };\n  const isPrimitiveRoot = (g, p) => {\n    if (g <= 1 || g >= p) return false;\n\n    // Find prime factors of p-1\n    let factors = findPrimeFactors(p - 1);\n\n    // Check if g^((p-1)/factor) mod p != 1 for all prime factors\n    for (let factor of factors) {\n      if (modPow(g, (p - 1) / factor, p) === 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const findPrimeFactors = n => {\n    let factors = new Set();\n    for (let i = 2; i * i <= n; i++) {\n      while (n % i === 0) {\n        factors.add(i);\n        n = Math.floor(n / i);\n      }\n    }\n    if (n > 1) factors.add(n);\n    return Array.from(factors);\n  };\n  const modPow = (base, pow, mod) => {\n    let result = 1;\n    base %= mod;\n    while (pow > 0) {\n      if (pow % 2 === 1) {\n        result = result * base % mod;\n      }\n      pow = Math.floor(pow / 2);\n      base = base * base % mod;\n    }\n    return result;\n  };\n  const generateAndPublishPublicKey = () => {\n    const p = parseInt(alice.p);\n    const g = parseInt(alice.g);\n    const x = parseInt(alice.x);\n    const h = modPow(g, x, p);\n    setPublicKey({\n      p: p.toString(),\n      g: g.toString(),\n      h: h.toString()\n    });\n    setPublicKeyGenerated(true);\n    setEncryptedMessage({\n      c1: '',\n      c2: ''\n    });\n    setDecryptedMessage('');\n    setMessageReceived(false);\n    setErrors({});\n  };\n  const encryptAndSend = () => {\n    setEncryptedMessage({\n      c1: '',\n      c2: ''\n    });\n    setDecryptedMessage('');\n    setMessageReceived(false);\n    setErrors({});\n    // Implement encryption logic here\n    const {\n      c1,\n      c2\n    } = elGamalEncrypt(parseInt(bob.m), parseInt(publicKey.p), parseInt(publicKey.g), parseInt(publicKey.h), parseInt(bob.r));\n    setEncryptedMessage({\n      c1,\n      c2\n    });\n    setMessageReceived(true);\n  };\n  const decrypt = () => {\n    const decrypted = elGamalDecrypt(parseInt(alice.p), parseInt(alice.x), encryptedMessage.c1, encryptedMessage.c2);\n    setDecryptedMessage(decrypted);\n  };\n  const generateRandomR = () => {\n    const p = parseInt(publicKey.p);\n    if (p) {\n      const randomR = Math.floor(Math.random() * (p - 2)) + 2; // 2 <= r <= p-1\n      setBob({\n        ...bob,\n        r: randomR.toString()\n      });\n      validateField('r', randomR.toString());\n    }\n  };\n  const hasAliceErrors = () => {\n    return !!errors.p || !!errors.g || !!errors.x || !alice.p || !alice.g || !alice.x;\n  };\n  const hasBobErrors = () => {\n    return !!errors.r || !!errors.m || !bob.r || !bob.m;\n  };\n  const handleAliceFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const fileContent = e.target.result;\n        const lines = fileContent.split(/\\r?\\n/);\n        let extractedAlice = {\n          p: '',\n          g: '',\n          x: ''\n        };\n        for (let line of lines) {\n          line = line.trim();\n          if (line.startsWith('p:')) extractedAlice.p = line.replace('p:', '').trim();else if (line.startsWith('g:')) extractedAlice.g = line.replace('g:', '').trim();else if (line.startsWith('x:')) extractedAlice.x = line.replace('x:', '').trim();\n        }\n        setAlice(extractedAlice);\n\n        // Validate the new inputs\n        Object.keys(extractedAlice).forEach(key => validateField(key, extractedAlice[key]));\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleBobFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const fileContent = e.target.result;\n        const lines = fileContent.split(/\\r?\\n/);\n        let extractedBob = {\n          r: '',\n          m: ''\n        };\n        for (let line of lines) {\n          line = line.trim();\n          if (line.startsWith('r:')) extractedBob.r = line.replace('r:', '').trim();else if (line.startsWith('m:')) extractedBob.m = line.replace('m:', '').trim();\n        }\n        setBob(extractedBob);\n\n        // Validate the new inputs\n        Object.keys(extractedBob).forEach(key => validateField(key, extractedBob[key]));\n      };\n      reader.readAsText(file);\n    }\n  };\n  const fileFormatTooltip = person => {\n    const format = person === 'Alice' ? \"File format:\\np: [prime number]\\ng: [generator]\\nx: [private key]\" : \"File format:\\nr: [random number]\\nm: [message]\";\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: /*#__PURE__*/React.createElement(\"pre\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }\n      }, format),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InfoIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    })));\n  };\n  return /*#__PURE__*/React.createElement(Grow, {\n    in: true,\n    timeout: 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      maxWidth: 1200,\n      margin: 'auto',\n      padding: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    elevation: 4,\n    sx: {\n      padding: 3,\n      backgroundColor: '#f5f5f5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    component: \"h1\",\n    gutterBottom: true,\n    align: \"center\",\n    sx: {\n      mb: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }, \"ElGamal Cipher Tool\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    sx: {\n      width: '30%',\n      padding: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 29\n    }\n  }, \"Alice's Machine\"), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Enter a prime p\",\n    fullWidth: true,\n    name: \"p\",\n    value: alice.p,\n    onChange: handleAliceChange,\n    error: !!errors.p,\n    helperText: errors.p,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Choose g\",\n    fullWidth: true,\n    name: \"g\",\n    value: alice.g,\n    onChange: handleAliceChange,\n    error: !!errors.g,\n    helperText: errors.g,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Enter Private Key x\",\n    fullWidth: true,\n    name: \"x\",\n    value: alice.x,\n    onChange: handleAliceChange,\n    error: !!errors.x,\n    helperText: errors.x,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 29\n    }\n  }, \"h is calculated as h = g^x mod p\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    component: \"label\",\n    fullWidth: true,\n    sx: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 33\n    }\n  }, \"Upload Alice's File\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".txt\",\n    hidden: true,\n    onChange: handleAliceFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 37\n    }\n  })), fileFormatTooltip('Alice')), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: generateAndPublishPublicKey,\n    fullWidth: true,\n    sx: {\n      mb: 2,\n      padding: '10px 0',\n      fontSize: '16px'\n    },\n    disabled: hasAliceErrors(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 29\n    }\n  }, \"Generate & Publish Public Key\"), messageReceived && /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      mt: 2,\n      p: 2,\n      border: '1px solid #ccc',\n      borderRadius: '4px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 37\n    }\n  }, \"You received a message from Bob.\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"success\",\n    onClick: decrypt,\n    sx: {\n      mt: 1,\n      padding: '10px 0',\n      fontSize: '16px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 37\n    }\n  }, \"Decrypt\"), decryptedMessage && /*#__PURE__*/React.createElement(Typography, {\n    sx: {\n      mt: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 41\n    }\n  }, \"Bob's decrypted message: \", decryptedMessage))), /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    sx: {\n      width: '30%',\n      padding: 2,\n      alignSelf: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 29\n    }\n  }, \"Alice's Public Key\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 29\n    }\n  }, publicKey.p ? `p: ${publicKey.p}, g: ${publicKey.g}, h: ${publicKey.h}` : '--'), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 29\n    }\n  }, \"Bob's encrypted message\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 29\n    }\n  }, encryptedMessage.c1 ? `c1: ${encryptedMessage.c1}, c2: ${encryptedMessage.c2}` : '--')), /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    sx: {\n      width: '30%',\n      padding: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 29\n    }\n  }, \"Bob's Machine\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Private Key for Encryption r\",\n    fullWidth: true,\n    name: \"r\",\n    value: bob.r,\n    onChange: handleBobChange,\n    error: !!errors.r,\n    helperText: errors.r,\n    sx: {\n      mr: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: generateRandomR,\n    disabled: !publicKeyGenerated,\n    sx: {\n      minWidth: 'auto',\n      px: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 33\n    }\n  }, \"\\uD83C\\uDFB2\")), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Message m\",\n    fullWidth: true,\n    name: \"m\",\n    value: bob.m,\n    onChange: handleBobChange,\n    error: !!errors.m,\n    helperText: errors.m,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 29\n    }\n  }, \"Encrypted message is calculated as (c1, c2) = (g^r mod p, (h^r * m) mod p)\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    component: \"label\",\n    fullWidth: true,\n    sx: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 33\n    }\n  }, \"Upload Bob's File\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".txt\",\n    hidden: true,\n    onChange: handleBobFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 37\n    }\n  })), fileFormatTooltip('Bob')), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: encryptAndSend,\n    fullWidth: true,\n    disabled: !publicKeyGenerated || hasBobErrors(),\n    sx: {\n      padding: '10px 0',\n      fontSize: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 29\n    }\n  }, \"Encrypt & Send\"))))));\n}\nexport default ElGamalForm;","map":{"version":3,"names":["React","useState","TextField","Button","Box","Typography","Paper","Grid","Grow","Tooltip","IconButton","InfoIcon","elGamalEncrypt","elGamalDecrypt","ElGamalForm","alice","setAlice","p","g","x","bob","setBob","r","m","publicKey","setPublicKey","h","encryptedMessage","setEncryptedMessage","c1","c2","decryptedMessage","setDecryptedMessage","messageReceived","setMessageReceived","publicKeyGenerated","setPublicKeyGenerated","errors","setErrors","handleAliceChange","e","target","name","value","validateField","handleBobChange","newErrors","isPrime","parseInt","isPrimitiveRoot","isNaN","num","i","s","Math","sqrt","factors","findPrimeFactors","factor","modPow","n","Set","add","floor","Array","from","base","pow","mod","result","generateAndPublishPublicKey","toString","encryptAndSend","decrypt","decrypted","generateRandomR","randomR","random","hasAliceErrors","hasBobErrors","handleAliceFileUpload","event","file","files","reader","FileReader","onload","fileContent","lines","split","extractedAlice","line","trim","startsWith","replace","Object","keys","forEach","key","readAsText","handleBobFileUpload","extractedBob","fileFormatTooltip","person","format","createElement","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","size","fontSize","in","timeout","sx","maxWidth","margin","padding","elevation","backgroundColor","variant","component","gutterBottom","align","mb","display","justifyContent","width","label","fullWidth","onChange","error","helperText","alignItems","marginRight","type","accept","hidden","color","onClick","disabled","mt","border","borderRadius","alignSelf","mr","minWidth","px"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/components/ElGamal_Form.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Box, Typography, Paper, Grid, Grow, Tooltip, IconButton } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { elGamalEncrypt, elGamalDecrypt } from '../algorithms/elgamal.js';\n\nfunction ElGamalForm() {\n    const [alice, setAlice] = useState({ p: '', g: '', x: '' });\n    const [bob, setBob] = useState({ r: '', m: '' });\n    const [publicKey, setPublicKey] = useState({ p: '', g: '', h: '' });\n    const [encryptedMessage, setEncryptedMessage] = useState({ c1: '', c2: '' });\n    const [decryptedMessage, setDecryptedMessage] = useState('');\n    const [messageReceived, setMessageReceived] = useState(false);\n    const [publicKeyGenerated, setPublicKeyGenerated] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const handleAliceChange = (e) => {\n        setAlice({ ...alice, [e.target.name]: e.target.value });\n        validateField(e.target.name, e.target.value);\n    };\n\n    const handleBobChange = (e) => {\n        setBob({ ...bob, [e.target.name]: e.target.value });\n        validateField(e.target.name, e.target.value);\n    };\n\n    const validateField = (name, value) => {\n        let newErrors = { ...errors };\n        switch (name) {\n            case 'p':\n                newErrors.p = !isPrime(parseInt(value)) ? 'Must be a prime number' : '';\n                break;\n            case 'g':\n                if (alice.p && value) {\n                    newErrors.g = !isPrimitiveRoot(parseInt(value), parseInt(alice.p)) \n                        ? 'g is not a primitive root modulo p' \n                        : '';\n                }\n                break;\n            case 'x':\n            case 'r':\n            case 'm':\n                newErrors[name] = !value || isNaN(value) ? 'Must be a number' : '';\n                break;\n            default:\n                break;\n        }\n        setErrors(newErrors);\n    };\n\n    const isPrime = (num) => {\n        for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    const isPrimitiveRoot = (g, p) => {\n        if (g <= 1 || g >= p) return false;\n        \n        // Find prime factors of p-1\n        let factors = findPrimeFactors(p - 1);\n        \n        // Check if g^((p-1)/factor) mod p != 1 for all prime factors\n        for (let factor of factors) {\n            if (modPow(g, (p - 1) / factor, p) === 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const findPrimeFactors = (n) => {\n        let factors = new Set();\n        for (let i = 2; i * i <= n; i++) {\n            while (n % i === 0) {\n                factors.add(i);\n                n = Math.floor(n / i);\n            }\n        }\n        if (n > 1) factors.add(n);\n        return Array.from(factors);\n    }\n\n    const modPow = (base, pow, mod) => {\n        let result = 1;\n        base %=  mod;\n        while (pow > 0) {\n            if (pow % 2 === 1) {\n                result = (result * base) % mod;\n            }\n            pow = Math.floor(pow / 2);\n            base = (base * base) % mod;\n        }\n        return result;\n    }\n\n    const generateAndPublishPublicKey = () => {\n        const p = parseInt(alice.p);\n        const g = parseInt(alice.g);\n        const x = parseInt(alice.x);\n        \n        const h = modPow(g, x, p);\n        \n        setPublicKey({ p: p.toString(), g: g.toString(), h: h.toString() });\n        setPublicKeyGenerated(true);\n\n        setEncryptedMessage({ c1: '', c2: '' });\n           setDecryptedMessage('');\n           setMessageReceived(false);\n           setErrors({});\n    };\n\n    const encryptAndSend = () => {\n        setEncryptedMessage({ c1: '', c2: '' });\n        setDecryptedMessage('');\n        setMessageReceived(false);\n        setErrors({});\n        // Implement encryption logic here\n        const { c1, c2 } = elGamalEncrypt(parseInt(bob.m), parseInt(publicKey.p), parseInt(publicKey.g), parseInt(publicKey.h), parseInt(bob.r));\n        setEncryptedMessage({ c1, c2 });\n        setMessageReceived(true);\n    };\n\n    const decrypt = () => {\n        const decrypted = elGamalDecrypt(parseInt(alice.p), parseInt(alice.x),encryptedMessage.c1, encryptedMessage.c2);\n        setDecryptedMessage(decrypted);\n    };\n\n    const generateRandomR = () => {\n        const p = parseInt(publicKey.p);\n        if (p) {\n            const randomR = Math.floor(Math.random() * (p - 2)) + 2; // 2 <= r <= p-1\n            setBob({ ...bob, r: randomR.toString() });\n            validateField('r', randomR.toString());\n        }\n    };\n\n    const hasAliceErrors = () => {\n        return !!errors.p || !!errors.g || !!errors.x || !alice.p || !alice.g || !alice.x;\n    };\n\n    const hasBobErrors = () => {\n        return !!errors.r || !!errors.m || !bob.r || !bob.m;\n    };\n\n    const handleAliceFileUpload = (event) => {\n        const file = event.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const fileContent = e.target.result;\n                const lines = fileContent.split(/\\r?\\n/);\n                let extractedAlice = { p: '', g: '', x: '' };\n\n                for (let line of lines) {\n                    line = line.trim();\n                    if (line.startsWith('p:')) extractedAlice.p = line.replace('p:', '').trim();\n                    else if (line.startsWith('g:')) extractedAlice.g = line.replace('g:', '').trim();\n                    else if (line.startsWith('x:')) extractedAlice.x = line.replace('x:', '').trim();\n                }\n\n                setAlice(extractedAlice);\n                \n                // Validate the new inputs\n                Object.keys(extractedAlice).forEach(key => validateField(key, extractedAlice[key]));\n            };\n            reader.readAsText(file);\n        }\n    };\n\n    const handleBobFileUpload = (event) => {\n        const file = event.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const fileContent = e.target.result;\n                const lines = fileContent.split(/\\r?\\n/);\n                let extractedBob = { r: '', m: '' };\n\n                for (let line of lines) {\n                    line = line.trim();\n                    if (line.startsWith('r:')) extractedBob.r = line.replace('r:', '').trim();\n                    else if (line.startsWith('m:')) extractedBob.m = line.replace('m:', '').trim();\n                }\n\n                setBob(extractedBob);\n                \n                // Validate the new inputs\n                Object.keys(extractedBob).forEach(key => validateField(key, extractedBob[key]));\n            };\n            reader.readAsText(file);\n        }\n    };\n\n    const fileFormatTooltip = (person) => {\n        const format = person === 'Alice' \n            ? \"File format:\\np: [prime number]\\ng: [generator]\\nx: [private key]\"\n            : \"File format:\\nr: [random number]\\nm: [message]\";\n        return (\n            <Tooltip title={<pre>{format}</pre>}>\n                <IconButton size=\"small\">\n                    <InfoIcon fontSize=\"small\" />\n                </IconButton>\n            </Tooltip>\n        );\n    };\n\n    return (\n        <Grow in={true} timeout={1000}>\n            <Box sx={{ maxWidth: 1200, margin: 'auto', padding: 4 }}>\n                <Paper elevation={4} sx={{ padding: 3, backgroundColor: '#f5f5f5' }}>\n                    <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\n                        ElGamal Cipher Tool\n                    </Typography>\n\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Paper elevation={3} sx={{ width: '30%', padding: 2 }}>\n                            <Typography variant=\"h6\">Alice's Machine</Typography>\n                           \n                         \n                            <TextField \n                                label=\"Enter a prime p\" \n                                fullWidth \n                                name=\"p\" \n                                value={alice.p} \n                                onChange={handleAliceChange} \n                                error={!!errors.p}\n                                helperText={errors.p}\n                                sx={{ mb: 2 }}\n                            />\n                            <TextField \n                                label=\"Choose g\" \n                                fullWidth \n                                name=\"g\" \n                                value={alice.g} \n                                onChange={handleAliceChange}\n                                error={!!errors.g}\n                                helperText={errors.g}\n                                sx={{ mb: 2 }}\n                            />\n                            <TextField \n                                label=\"Enter Private Key x\" \n                                fullWidth \n                                name=\"x\" \n                                value={alice.x} \n                                onChange={handleAliceChange}\n                                error={!!errors.x}\n                                helperText={errors.x}\n                                sx={{ mb: 2 }}\n                            />\n                            <Typography variant=\"body2\" sx={{ mb: 2 }}>h is calculated as h = g^x mod p</Typography>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                                <Button \n                                    variant=\"contained\" \n                                    component=\"label\" \n                                    fullWidth \n                                    sx={{ marginRight: '10px' }}\n                                >\n                                    Upload Alice's File\n                                    <input type=\"file\" accept=\".txt\" hidden onChange={handleAliceFileUpload} />\n                                </Button>\n                                {fileFormatTooltip('Alice')}\n                            </Box>\n                           \n                            <Button \n                                variant=\"contained\" \n                                color=\"secondary\" \n                                onClick={generateAndPublishPublicKey} \n                                fullWidth \n                                sx={{ mb: 2, padding: '10px 0', fontSize: '16px' }}\n                                disabled={hasAliceErrors()}\n                            >\n                                Generate & Publish Public Key\n                            </Button>\n                            \n                            {messageReceived && (\n                                <Box sx={{ mt: 2, p: 2, border: '1px solid #ccc', borderRadius: '4px' }}>\n                                    <Typography>You received a message from Bob.</Typography>\n                                    <Button \n                                        variant=\"contained\" \n                                        color=\"success\" \n                                        onClick={decrypt} \n                                        sx={{ mt: 1, padding: '10px 0', fontSize: '16px', width: '100%' }}\n                                    >\n                                        Decrypt\n                                    </Button>\n                                    {decryptedMessage && (\n                                        <Typography sx={{ mt: 1 }}>Bob's decrypted message: {decryptedMessage}</Typography>\n                                    )}\n                                </Box>\n                            )}\n                        </Paper>\n\n                        <Paper elevation={3} sx={{ width: '30%', padding: 2, alignSelf: 'center' }}>\n                            <Typography variant=\"h6\" align=\"center\">Alice's Public Key</Typography>\n                            <Typography align=\"center\">{publicKey.p ? `p: ${publicKey.p}, g: ${publicKey.g}, h: ${publicKey.h}` : '--'}</Typography>\n                            <Typography variant=\"h6\" align=\"center\" sx={{ mt: 2 }}>Bob's encrypted message</Typography>\n                            <Typography align=\"center\">{encryptedMessage.c1 ? `c1: ${encryptedMessage.c1}, c2: ${encryptedMessage.c2}` : '--'}</Typography>\n                        </Paper>\n\n                        <Paper elevation={3} sx={{ width: '30%', padding: 2 }}>\n                            <Typography variant=\"h6\">Bob's Machine</Typography>\n                           \n                           \n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                                <TextField \n                                    label=\"Private Key for Encryption r\" \n                                    fullWidth \n                                    name=\"r\" \n                                    value={bob.r} \n                                    onChange={handleBobChange}\n                                    error={!!errors.r}\n                                    helperText={errors.r}\n                                    sx={{ mr: 1 }}\n                                />\n                                <Button \n                                    variant=\"outlined\" \n                                    onClick={generateRandomR}\n                                    disabled={!publicKeyGenerated}\n                                    sx={{ minWidth: 'auto', px: 1 }}\n                                >\n                                    🎲\n                                </Button>\n                            </Box>\n                            <TextField \n                                label=\"Message m\" \n                                fullWidth \n                                name=\"m\" \n                                value={bob.m} \n                                onChange={handleBobChange}\n                                error={!!errors.m}\n                                helperText={errors.m}\n                                sx={{ mb: 2 }}\n                            />\n                         \n                            <Typography variant=\"body2\" sx={{ mb: 2 }}>Encrypted message is calculated as (c1, c2) = (g^r mod p, (h^r * m) mod p)</Typography>\n                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                                <Button \n                                    variant=\"contained\" \n                                    component=\"label\" \n                                    fullWidth \n                                    sx={{ marginRight: '10px' }}\n                                >\n                                    Upload Bob's File\n                                    <input type=\"file\" accept=\".txt\" hidden onChange={handleBobFileUpload} />\n                                </Button>\n                                {fileFormatTooltip('Bob')}\n                            </Box>\n                          \n                            <Button \n                                variant=\"contained\" \n                                color=\"secondary\" \n                                onClick={encryptAndSend} \n                                fullWidth \n                                disabled={!publicKeyGenerated || hasBobErrors()}\n                                sx={{ padding: '10px 0', fontSize: '16px' }}\n                            >\n                                Encrypt & Send\n                            </Button>\n                            \n                        </Paper>\n                    </Box>\n                </Paper>\n            </Box>\n        </Grow>\n    );\n}\n\nexport default ElGamalForm;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,MAAM,EAAEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,UAAU,QAAQ,eAAe;AAC1G,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,SAASC,cAAc,EAAEC,cAAc,QAAQ,0BAA0B;AAEzE,SAASC,WAAWA,CAAA,EAAG;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAG,CAAC,CAAC;EAC3D,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAG,CAAC,CAAC;EAChD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC;IAAEgB,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE,EAAE;IAAEQ,CAAC,EAAE;EAAG,CAAC,CAAC;EACnE,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3B,QAAQ,CAAC;IAAE4B,EAAE,EAAE,EAAE;IAAEC,EAAE,EAAE;EAAG,CAAC,CAAC;EAC5E,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACkC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACoC,MAAM,EAAEC,SAAS,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMsC,iBAAiB,GAAIC,CAAC,IAAK;IAC7BxB,QAAQ,CAAC;MAAE,GAAGD,KAAK;MAAE,CAACyB,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAM,CAAC,CAAC;IACvDC,aAAa,CAACJ,CAAC,CAACC,MAAM,CAACC,IAAI,EAAEF,CAAC,CAACC,MAAM,CAACE,KAAK,CAAC;EAChD,CAAC;EAED,MAAME,eAAe,GAAIL,CAAC,IAAK;IAC3BnB,MAAM,CAAC;MAAE,GAAGD,GAAG;MAAE,CAACoB,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAM,CAAC,CAAC;IACnDC,aAAa,CAACJ,CAAC,CAACC,MAAM,CAACC,IAAI,EAAEF,CAAC,CAACC,MAAM,CAACE,KAAK,CAAC;EAChD,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACF,IAAI,EAAEC,KAAK,KAAK;IACnC,IAAIG,SAAS,GAAG;MAAE,GAAGT;IAAO,CAAC;IAC7B,QAAQK,IAAI;MACR,KAAK,GAAG;QACJI,SAAS,CAAC7B,CAAC,GAAG,CAAC8B,OAAO,CAACC,QAAQ,CAACL,KAAK,CAAC,CAAC,GAAG,wBAAwB,GAAG,EAAE;QACvE;MACJ,KAAK,GAAG;QACJ,IAAI5B,KAAK,CAACE,CAAC,IAAI0B,KAAK,EAAE;UAClBG,SAAS,CAAC5B,CAAC,GAAG,CAAC+B,eAAe,CAACD,QAAQ,CAACL,KAAK,CAAC,EAAEK,QAAQ,CAACjC,KAAK,CAACE,CAAC,CAAC,CAAC,GAC5D,oCAAoC,GACpC,EAAE;QACZ;QACA;MACJ,KAAK,GAAG;MACR,KAAK,GAAG;MACR,KAAK,GAAG;QACJ6B,SAAS,CAACJ,IAAI,CAAC,GAAG,CAACC,KAAK,IAAIO,KAAK,CAACP,KAAK,CAAC,GAAG,kBAAkB,GAAG,EAAE;QAClE;MACJ;QACI;IACR;IACAL,SAAS,CAACQ,SAAS,CAAC;EACxB,CAAC;EAED,MAAMC,OAAO,GAAII,GAAG,IAAK;IACrB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAEC,CAAC,IAAIC,CAAC,EAAED,CAAC,EAAE,EAC1C,IAAGD,GAAG,GAAGC,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK;IAClC,OAAOD,GAAG,GAAG,CAAC;EAClB,CAAC;EAED,MAAMF,eAAe,GAAGA,CAAC/B,CAAC,EAAED,CAAC,KAAK;IAC9B,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAID,CAAC,EAAE,OAAO,KAAK;;IAElC;IACA,IAAIuC,OAAO,GAAGC,gBAAgB,CAACxC,CAAC,GAAG,CAAC,CAAC;;IAErC;IACA,KAAK,IAAIyC,MAAM,IAAIF,OAAO,EAAE;MACxB,IAAIG,MAAM,CAACzC,CAAC,EAAE,CAACD,CAAC,GAAG,CAAC,IAAIyC,MAAM,EAAEzC,CAAC,CAAC,KAAK,CAAC,EAAE;QACtC,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EAED,MAAMwC,gBAAgB,GAAIG,CAAC,IAAK;IAC5B,IAAIJ,OAAO,GAAG,IAAIK,GAAG,CAAC,CAAC;IACvB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGA,CAAC,IAAIQ,CAAC,EAAER,CAAC,EAAE,EAAE;MAC7B,OAAOQ,CAAC,GAAGR,CAAC,KAAK,CAAC,EAAE;QAChBI,OAAO,CAACM,GAAG,CAACV,CAAC,CAAC;QACdQ,CAAC,GAAGN,IAAI,CAACS,KAAK,CAACH,CAAC,GAAGR,CAAC,CAAC;MACzB;IACJ;IACA,IAAIQ,CAAC,GAAG,CAAC,EAAEJ,OAAO,CAACM,GAAG,CAACF,CAAC,CAAC;IACzB,OAAOI,KAAK,CAACC,IAAI,CAACT,OAAO,CAAC;EAC9B,CAAC;EAED,MAAMG,MAAM,GAAGA,CAACO,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;IAC/B,IAAIC,MAAM,GAAG,CAAC;IACdH,IAAI,IAAKE,GAAG;IACZ,OAAOD,GAAG,GAAG,CAAC,EAAE;MACZ,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;QACfE,MAAM,GAAIA,MAAM,GAAGH,IAAI,GAAIE,GAAG;MAClC;MACAD,GAAG,GAAGb,IAAI,CAACS,KAAK,CAACI,GAAG,GAAG,CAAC,CAAC;MACzBD,IAAI,GAAIA,IAAI,GAAGA,IAAI,GAAIE,GAAG;IAC9B;IACA,OAAOC,MAAM;EACjB,CAAC;EAED,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;IACtC,MAAMrD,CAAC,GAAG+B,QAAQ,CAACjC,KAAK,CAACE,CAAC,CAAC;IAC3B,MAAMC,CAAC,GAAG8B,QAAQ,CAACjC,KAAK,CAACG,CAAC,CAAC;IAC3B,MAAMC,CAAC,GAAG6B,QAAQ,CAACjC,KAAK,CAACI,CAAC,CAAC;IAE3B,MAAMO,CAAC,GAAGiC,MAAM,CAACzC,CAAC,EAAEC,CAAC,EAAEF,CAAC,CAAC;IAEzBQ,YAAY,CAAC;MAAER,CAAC,EAAEA,CAAC,CAACsD,QAAQ,CAAC,CAAC;MAAErD,CAAC,EAAEA,CAAC,CAACqD,QAAQ,CAAC,CAAC;MAAE7C,CAAC,EAAEA,CAAC,CAAC6C,QAAQ,CAAC;IAAE,CAAC,CAAC;IACnEnC,qBAAqB,CAAC,IAAI,CAAC;IAE3BR,mBAAmB,CAAC;MAAEC,EAAE,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAG,CAAC,CAAC;IACpCE,mBAAmB,CAAC,EAAE,CAAC;IACvBE,kBAAkB,CAAC,KAAK,CAAC;IACzBI,SAAS,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,MAAMkC,cAAc,GAAGA,CAAA,KAAM;IACzB5C,mBAAmB,CAAC;MAAEC,EAAE,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAG,CAAC,CAAC;IACvCE,mBAAmB,CAAC,EAAE,CAAC;IACvBE,kBAAkB,CAAC,KAAK,CAAC;IACzBI,SAAS,CAAC,CAAC,CAAC,CAAC;IACb;IACA,MAAM;MAAET,EAAE;MAAEC;IAAG,CAAC,GAAGlB,cAAc,CAACoC,QAAQ,CAAC5B,GAAG,CAACG,CAAC,CAAC,EAAEyB,QAAQ,CAACxB,SAAS,CAACP,CAAC,CAAC,EAAE+B,QAAQ,CAACxB,SAAS,CAACN,CAAC,CAAC,EAAE8B,QAAQ,CAACxB,SAAS,CAACE,CAAC,CAAC,EAAEsB,QAAQ,CAAC5B,GAAG,CAACE,CAAC,CAAC,CAAC;IACxIM,mBAAmB,CAAC;MAAEC,EAAE;MAAEC;IAAG,CAAC,CAAC;IAC/BI,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMuC,OAAO,GAAGA,CAAA,KAAM;IAClB,MAAMC,SAAS,GAAG7D,cAAc,CAACmC,QAAQ,CAACjC,KAAK,CAACE,CAAC,CAAC,EAAE+B,QAAQ,CAACjC,KAAK,CAACI,CAAC,CAAC,EAACQ,gBAAgB,CAACE,EAAE,EAAEF,gBAAgB,CAACG,EAAE,CAAC;IAC/GE,mBAAmB,CAAC0C,SAAS,CAAC;EAClC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAM1D,CAAC,GAAG+B,QAAQ,CAACxB,SAAS,CAACP,CAAC,CAAC;IAC/B,IAAIA,CAAC,EAAE;MACH,MAAM2D,OAAO,GAAGtB,IAAI,CAACS,KAAK,CAACT,IAAI,CAACuB,MAAM,CAAC,CAAC,IAAI5D,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACzDI,MAAM,CAAC;QAAE,GAAGD,GAAG;QAAEE,CAAC,EAAEsD,OAAO,CAACL,QAAQ,CAAC;MAAE,CAAC,CAAC;MACzC3B,aAAa,CAAC,GAAG,EAAEgC,OAAO,CAACL,QAAQ,CAAC,CAAC,CAAC;IAC1C;EACJ,CAAC;EAED,MAAMO,cAAc,GAAGA,CAAA,KAAM;IACzB,OAAO,CAAC,CAACzC,MAAM,CAACpB,CAAC,IAAI,CAAC,CAACoB,MAAM,CAACnB,CAAC,IAAI,CAAC,CAACmB,MAAM,CAAClB,CAAC,IAAI,CAACJ,KAAK,CAACE,CAAC,IAAI,CAACF,KAAK,CAACG,CAAC,IAAI,CAACH,KAAK,CAACI,CAAC;EACrF,CAAC;EAED,MAAM4D,YAAY,GAAGA,CAAA,KAAM;IACvB,OAAO,CAAC,CAAC1C,MAAM,CAACf,CAAC,IAAI,CAAC,CAACe,MAAM,CAACd,CAAC,IAAI,CAACH,GAAG,CAACE,CAAC,IAAI,CAACF,GAAG,CAACG,CAAC;EACvD,CAAC;EAED,MAAMyD,qBAAqB,GAAIC,KAAK,IAAK;IACrC,MAAMC,IAAI,GAAGD,KAAK,CAACxC,MAAM,CAAC0C,KAAK,CAAC,CAAC,CAAC;IAClC,IAAID,IAAI,EAAE;MACN,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAI9C,CAAC,IAAK;QACnB,MAAM+C,WAAW,GAAG/C,CAAC,CAACC,MAAM,CAAC4B,MAAM;QACnC,MAAMmB,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,OAAO,CAAC;QACxC,IAAIC,cAAc,GAAG;UAAEzE,CAAC,EAAE,EAAE;UAAEC,CAAC,EAAE,EAAE;UAAEC,CAAC,EAAE;QAAG,CAAC;QAE5C,KAAK,IAAIwE,IAAI,IAAIH,KAAK,EAAE;UACpBG,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;UAClB,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEH,cAAc,CAACzE,CAAC,GAAG0E,IAAI,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC,KACvE,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEH,cAAc,CAACxE,CAAC,GAAGyE,IAAI,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC,KAC5E,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEH,cAAc,CAACvE,CAAC,GAAGwE,IAAI,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC;QACpF;QAEA5E,QAAQ,CAAC0E,cAAc,CAAC;;QAExB;QACAK,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAACO,OAAO,CAACC,GAAG,IAAItD,aAAa,CAACsD,GAAG,EAAER,cAAc,CAACQ,GAAG,CAAC,CAAC,CAAC;MACvF,CAAC;MACDd,MAAM,CAACe,UAAU,CAACjB,IAAI,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMkB,mBAAmB,GAAInB,KAAK,IAAK;IACnC,MAAMC,IAAI,GAAGD,KAAK,CAACxC,MAAM,CAAC0C,KAAK,CAAC,CAAC,CAAC;IAClC,IAAID,IAAI,EAAE;MACN,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAI9C,CAAC,IAAK;QACnB,MAAM+C,WAAW,GAAG/C,CAAC,CAACC,MAAM,CAAC4B,MAAM;QACnC,MAAMmB,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,OAAO,CAAC;QACxC,IAAIY,YAAY,GAAG;UAAE/E,CAAC,EAAE,EAAE;UAAEC,CAAC,EAAE;QAAG,CAAC;QAEnC,KAAK,IAAIoE,IAAI,IAAIH,KAAK,EAAE;UACpBG,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;UAClB,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEQ,YAAY,CAAC/E,CAAC,GAAGqE,IAAI,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC,KACrE,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEQ,YAAY,CAAC9E,CAAC,GAAGoE,IAAI,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC;QAClF;QAEAvE,MAAM,CAACgF,YAAY,CAAC;;QAEpB;QACAN,MAAM,CAACC,IAAI,CAACK,YAAY,CAAC,CAACJ,OAAO,CAACC,GAAG,IAAItD,aAAa,CAACsD,GAAG,EAAEG,YAAY,CAACH,GAAG,CAAC,CAAC,CAAC;MACnF,CAAC;MACDd,MAAM,CAACe,UAAU,CAACjB,IAAI,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMoB,iBAAiB,GAAIC,MAAM,IAAK;IAClC,MAAMC,MAAM,GAAGD,MAAM,KAAK,OAAO,GAC3B,mEAAmE,GACnE,gDAAgD;IACtD,oBACIvG,KAAA,CAAAyG,aAAA,CAAChG,OAAO;MAACiG,KAAK,eAAE1G,KAAA,CAAAyG,aAAA;QAAAE,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAAMR,MAAY,CAAE;MAAAG,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAChChH,KAAA,CAAAyG,aAAA,CAAC/F,UAAU;MAACuG,IAAI,EAAC,OAAO;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACpBhH,KAAA,CAAAyG,aAAA,CAAC9F,QAAQ;MAACuG,QAAQ,EAAC,OAAO;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACpB,CACP,CAAC;EAElB,CAAC;EAED,oBACIhH,KAAA,CAAAyG,aAAA,CAACjG,IAAI;IAAC2G,EAAE,EAAE,IAAK;IAACC,OAAO,EAAE,IAAK;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BhH,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAEC,QAAQ,EAAE,IAAI;MAAEC,MAAM,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAE,CAAE;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpDhH,KAAA,CAAAyG,aAAA,CAACnG,KAAK;IAACmH,SAAS,EAAE,CAAE;IAACJ,EAAE,EAAE;MAAEG,OAAO,EAAE,CAAC;MAAEE,eAAe,EAAE;IAAU,CAAE;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChEhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,IAAI;IAACC,SAAS,EAAC,IAAI;IAACC,YAAY;IAACC,KAAK,EAAC,QAAQ;IAACT,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,qBAEvE,CAAC,eAEbhH,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAEW,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE;IAAgB,CAAE;IAAAtB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1DhH,KAAA,CAAAyG,aAAA,CAACnG,KAAK;IAACmH,SAAS,EAAE,CAAE;IAACJ,EAAE,EAAE;MAAEa,KAAK,EAAE,KAAK;MAAEV,OAAO,EAAE;IAAE,CAAE;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClDhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,IAAI;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,iBAA2B,CAAC,eAGrDhH,KAAA,CAAAyG,aAAA,CAACvG,SAAS;IACNiI,KAAK,EAAC,iBAAiB;IACvBC,SAAS;IACT1F,IAAI,EAAC,GAAG;IACRC,KAAK,EAAE5B,KAAK,CAACE,CAAE;IACfoH,QAAQ,EAAE9F,iBAAkB;IAC5B+F,KAAK,EAAE,CAAC,CAACjG,MAAM,CAACpB,CAAE;IAClBsH,UAAU,EAAElG,MAAM,CAACpB,CAAE;IACrBoG,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFhH,KAAA,CAAAyG,aAAA,CAACvG,SAAS;IACNiI,KAAK,EAAC,UAAU;IAChBC,SAAS;IACT1F,IAAI,EAAC,GAAG;IACRC,KAAK,EAAE5B,KAAK,CAACG,CAAE;IACfmH,QAAQ,EAAE9F,iBAAkB;IAC5B+F,KAAK,EAAE,CAAC,CAACjG,MAAM,CAACnB,CAAE;IAClBqH,UAAU,EAAElG,MAAM,CAACnB,CAAE;IACrBmG,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFhH,KAAA,CAAAyG,aAAA,CAACvG,SAAS;IACNiI,KAAK,EAAC,qBAAqB;IAC3BC,SAAS;IACT1F,IAAI,EAAC,GAAG;IACRC,KAAK,EAAE5B,KAAK,CAACI,CAAE;IACfkH,QAAQ,EAAE9F,iBAAkB;IAC5B+F,KAAK,EAAE,CAAC,CAACjG,MAAM,CAAClB,CAAE;IAClBoH,UAAU,EAAElG,MAAM,CAAClB,CAAE;IACrBkG,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,OAAO;IAACN,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,kCAA4C,CAAC,eACxFhH,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAEW,OAAO,EAAE,MAAM;MAAEQ,UAAU,EAAE,QAAQ;MAAET,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtDhH,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,WAAW;IACnBC,SAAS,EAAC,OAAO;IACjBQ,SAAS;IACTf,EAAE,EAAE;MAAEoB,WAAW,EAAE;IAAO,CAAE;IAAA9B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/B,qBAEG,eAAAhH,KAAA,CAAAyG,aAAA;IAAOiC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,MAAM;IAACC,MAAM;IAACP,QAAQ,EAAErD,qBAAsB;IAAA2B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACtE,CAAC,EACRV,iBAAiB,CAAC,OAAO,CACzB,CAAC,eAENtG,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,WAAW;IACnBkB,KAAK,EAAC,WAAW;IACjBC,OAAO,EAAExE,2BAA4B;IACrC8D,SAAS;IACTf,EAAE,EAAE;MAAEU,EAAE,EAAE,CAAC;MAAEP,OAAO,EAAE,QAAQ;MAAEN,QAAQ,EAAE;IAAO,CAAE;IACnD6B,QAAQ,EAAEjE,cAAc,CAAC,CAAE;IAAA6B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC9B,+BAEO,CAAC,EAER/E,eAAe,iBACZjC,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAE2B,EAAE,EAAE,CAAC;MAAE/H,CAAC,EAAE,CAAC;MAAEgI,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE;IAAM,CAAE;IAAAvC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpEhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAAAsG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,kCAA4C,CAAC,eACzDhH,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,WAAW;IACnBkB,KAAK,EAAC,SAAS;IACfC,OAAO,EAAErE,OAAQ;IACjB4C,EAAE,EAAE;MAAE2B,EAAE,EAAE,CAAC;MAAExB,OAAO,EAAE,QAAQ;MAAEN,QAAQ,EAAE,MAAM;MAAEgB,KAAK,EAAE;IAAO,CAAE;IAAAvB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrE,SAEO,CAAC,EACRjF,gBAAgB,iBACb/B,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACgH,EAAE,EAAE;MAAE2B,EAAE,EAAE;IAAE,CAAE;IAAArC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,2BAAyB,EAACjF,gBAA6B,CAErF,CAEN,CAAC,eAER/B,KAAA,CAAAyG,aAAA,CAACnG,KAAK;IAACmH,SAAS,EAAE,CAAE;IAACJ,EAAE,EAAE;MAAEa,KAAK,EAAE,KAAK;MAAEV,OAAO,EAAE,CAAC;MAAE2B,SAAS,EAAE;IAAS,CAAE;IAAAxC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACvEhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,IAAI;IAACG,KAAK,EAAC,QAAQ;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,oBAA8B,CAAC,eACvEhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACyH,KAAK,EAAC,QAAQ;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAExF,SAAS,CAACP,CAAC,GAAG,MAAMO,SAAS,CAACP,CAAC,QAAQO,SAAS,CAACN,CAAC,QAAQM,SAAS,CAACE,CAAC,EAAE,GAAG,IAAiB,CAAC,eACxH1B,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,IAAI;IAACG,KAAK,EAAC,QAAQ;IAACT,EAAE,EAAE;MAAE2B,EAAE,EAAE;IAAE,CAAE;IAAArC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,yBAAmC,CAAC,eAC3FhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACyH,KAAK,EAAC,QAAQ;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErF,gBAAgB,CAACE,EAAE,GAAG,OAAOF,gBAAgB,CAACE,EAAE,SAASF,gBAAgB,CAACG,EAAE,EAAE,GAAG,IAAiB,CAC3H,CAAC,eAER9B,KAAA,CAAAyG,aAAA,CAACnG,KAAK;IAACmH,SAAS,EAAE,CAAE;IAACJ,EAAE,EAAE;MAAEa,KAAK,EAAE,KAAK;MAAEV,OAAO,EAAE;IAAE,CAAE;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClDhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,IAAI;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,eAAyB,CAAC,eAGnDhH,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAEW,OAAO,EAAE,MAAM;MAAEQ,UAAU,EAAE,QAAQ;MAAET,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtDhH,KAAA,CAAAyG,aAAA,CAACvG,SAAS;IACNiI,KAAK,EAAC,8BAA8B;IACpCC,SAAS;IACT1F,IAAI,EAAC,GAAG;IACRC,KAAK,EAAEvB,GAAG,CAACE,CAAE;IACb+G,QAAQ,EAAExF,eAAgB;IAC1ByF,KAAK,EAAE,CAAC,CAACjG,MAAM,CAACf,CAAE;IAClBiH,UAAU,EAAElG,MAAM,CAACf,CAAE;IACrB+F,EAAE,EAAE;MAAE+B,EAAE,EAAE;IAAE,CAAE;IAAAzC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFhH,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,UAAU;IAClBmB,OAAO,EAAEnE,eAAgB;IACzBoE,QAAQ,EAAE,CAAC5G,kBAAmB;IAC9BkF,EAAE,EAAE;MAAEgC,QAAQ,EAAE,MAAM;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAA3C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnC,cAEO,CACP,CAAC,eACNhH,KAAA,CAAAyG,aAAA,CAACvG,SAAS;IACNiI,KAAK,EAAC,WAAW;IACjBC,SAAS;IACT1F,IAAI,EAAC,GAAG;IACRC,KAAK,EAAEvB,GAAG,CAACG,CAAE;IACb8G,QAAQ,EAAExF,eAAgB;IAC1ByF,KAAK,EAAE,CAAC,CAACjG,MAAM,CAACd,CAAE;IAClBgH,UAAU,EAAElG,MAAM,CAACd,CAAE;IACrB8F,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eAEFhH,KAAA,CAAAyG,aAAA,CAACpG,UAAU;IAACsH,OAAO,EAAC,OAAO;IAACN,EAAE,EAAE;MAAEU,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,4EAAsF,CAAC,eAClIhH,KAAA,CAAAyG,aAAA,CAACrG,GAAG;IAACiH,EAAE,EAAE;MAAEW,OAAO,EAAE,MAAM;MAAEQ,UAAU,EAAE,QAAQ;MAAET,EAAE,EAAE;IAAE,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtDhH,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,WAAW;IACnBC,SAAS,EAAC,OAAO;IACjBQ,SAAS;IACTf,EAAE,EAAE;MAAEoB,WAAW,EAAE;IAAO,CAAE;IAAA9B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/B,mBAEG,eAAAhH,KAAA,CAAAyG,aAAA;IAAOiC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,MAAM;IAACC,MAAM;IAACP,QAAQ,EAAEjC,mBAAoB;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACpE,CAAC,EACRV,iBAAiB,CAAC,KAAK,CACvB,CAAC,eAENtG,KAAA,CAAAyG,aAAA,CAACtG,MAAM;IACHwH,OAAO,EAAC,WAAW;IACnBkB,KAAK,EAAC,WAAW;IACjBC,OAAO,EAAEtE,cAAe;IACxB4D,SAAS;IACTW,QAAQ,EAAE,CAAC5G,kBAAkB,IAAI4C,YAAY,CAAC,CAAE;IAChDsC,EAAE,EAAE;MAAEG,OAAO,EAAE,QAAQ;MAAEN,QAAQ,EAAE;IAAO,CAAE;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/C,gBAEO,CAEL,CACN,CACF,CACN,CACH,CAAC;AAEf;AAEA,eAAelG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}