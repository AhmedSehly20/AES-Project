{"ast":null,"code":"function createMatrix(key) {\n  const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\";\n  let matrixString = \"\";\n  let used = new Set();\n  key = key.toUpperCase().replace(/[^A-Z]/g, '').replace(/J/g, 'I');\n  for (let I of key) {\n    if (!used.has(I) && alphabet.includes(I)) {\n      matrixString += I;\n      used.add(I);\n      //console.log(used)\n    }\n  }\n  for (let I of alphabet) {\n    if (!used.has(I)) {\n      matrixString += I;\n      used.add(I);\n    }\n  }\n  const matrix = [];\n  for (let i = 0; i < 5; i++) {\n    matrix.push(matrixString.slice(i * 5, i * 5 + 5).split(''));\n  }\n  console.log(matrix);\n  return matrix;\n}\nfunction prepareText(text) {\n  text = text.toUpperCase().replace(/J/g, 'I').replace(/[^A-Z]/g, '');\n  let pairs = [];\n  const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\";\n  for (let i = 0; i < text.length; i += 2) {\n    let pair = text[i];\n    if (i + 1 < text.length) {\n      if (text[i] === text[i + 1]) {\n        if (text[i] === 'X') {\n          pair += text.includes('Z') ? chooseAlternateLetter(text) : 'Z';\n        } else {\n          pair += 'X';\n        }\n        i--;\n      } else {\n        pair += text[i + 1];\n      }\n    } else {\n      pair += text[i] === 'X' ? text.includes('Z') ? chooseAlternateLetter(text) : 'Z' : 'X';\n    }\n    pairs.push(pair);\n  }\n  //console.log(pairs)\n  return pairs;\n}\nfunction chooseAlternateLetter(text) {\n  const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\";\n  for (let char of alphabet) {\n    if (!text.includes(char)) {\n      return char;\n    }\n  }\n  return 'X';\n}\nfunction findPosition(letter, matrix) {\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (matrix[row][col] === letter) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n}\nexport function playfairEncrypt(text, key) {\n  const matrix = createMatrix(key);\n  const pairs = prepareText(text);\n  let encryptedText = '';\n  let steps = ['1- Construct a 5x5 matrix.', '2- Sort the key in the matrix and fill with remaining letters.', '3- Group plaintext into pairs: ' + pairs.join(', ')];\n  pairs.forEach(pair => {\n    const pos1 = findPosition(pair[0], matrix);\n    const pos2 = findPosition(pair[1], matrix);\n    let result = '';\n    if (pos1.row === pos2.row) {\n      result = matrix[pos1.row][(pos1.col + 1) % 5] + matrix[pos2.row][(pos2.col + 1) % 5];\n      steps.push(`Encrypt pair ${pair}: Same row, move right -> ${result}`);\n    } else if (pos1.col === pos2.col) {\n      result = matrix[(pos1.row + 1) % 5][pos1.col] + matrix[(pos2.row + 1) % 5][pos2.col];\n      steps.push(`Encrypt pair ${pair}: Same column, move below -> ${result}`);\n    } else {\n      result = matrix[pos1.row][pos2.col] + matrix[pos2.row][pos1.col];\n      steps.push(`Encrypt pair ${pair}: Different row and column, rectangle swap -> ${result}`);\n    }\n\n    //console.log(result)\n\n    encryptedText += result;\n  });\n  steps.push('4- Perform encryption using the following rules: Same row: move right, Same column: move below, Different row and column: rectangle swap.');\n  return {\n    encryptedText,\n    matrix,\n    steps\n  };\n}\nexport function playfairDecrypt(text, key) {\n  const matrix = createMatrix(key);\n  const pairs = prepareText(text);\n  let decryptedText = '';\n  let steps = ['1- Construct a 5x5 matrix.', '2- Sort the key in the matrix and fill with remaining letters.', '3- Group ciphertext into pairs: ' + pairs.join(', ')];\n  pairs.forEach(pair => {\n    const pos1 = findPosition(pair[0], matrix);\n    const pos2 = findPosition(pair[1], matrix);\n    let result = '';\n    if (pos1.row === pos2.row) {\n      result = matrix[pos1.row][(pos1.col + 4) % 5] + matrix[pos2.row][(pos2.col + 4) % 5];\n      steps.push(`Decrypt pair ${pair}: Same row, move left -> ${result}`);\n    } else if (pos1.col === pos2.col) {\n      result = matrix[(pos1.row + 4) % 5][pos1.col] + matrix[(pos2.row + 4) % 5][pos2.col];\n      steps.push(`Decrypt pair ${pair}: Same column, move above -> ${result}`);\n    } else {\n      result = matrix[pos1.row][pos2.col] + matrix[pos2.row][pos1.col];\n      steps.push(`Decrypt pair ${pair}: Different row and column, rectangle swap -> ${result}`);\n    }\n    //console.log(result)\n    decryptedText += result;\n  });\n  steps.push('4- Perform decryption using the following rules: Same row: move left, Same column: move above, Different row and column: rectangle swap.');\n  return {\n    decryptedText,\n    matrix,\n    steps\n  };\n}","map":{"version":3,"names":["createMatrix","key","alphabet","matrixString","used","Set","toUpperCase","replace","I","has","includes","add","matrix","i","push","slice","split","console","log","prepareText","text","pairs","length","pair","chooseAlternateLetter","char","findPosition","letter","row","col","playfairEncrypt","encryptedText","steps","join","forEach","pos1","pos2","result","playfairDecrypt","decryptedText"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/algorithms/playfair.js"],"sourcesContent":["function createMatrix(key) {\n    const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"; \n    let matrixString = \"\";\n\n     let used = new Set();\n\n    key = key.toUpperCase().replace(/[^A-Z]/g, '').replace(/J/g, 'I');\n\n    for (let I of key) {\n\n        if (!used.has(I) && alphabet.includes(I)) {\n\n            matrixString += I;\n\n             used.add(I);\n             //console.log(used)\n        }\n    }\n\n    for (let I of alphabet) {\n\n\n         if (!used.has(I)) {\n            matrixString += I;\n\n\n            used.add(I);\n        }\n    }\n\n    const matrix = [];\n     for (let i = 0; i < 5; i++) {\n        matrix.push(matrixString.slice(i * 5, i * 5 + 5).split(''));\n    }\n     console.log(matrix);\n     return matrix;\n}\n\nfunction prepareText(text) {\n    \n    text = text.toUpperCase().replace(/J/g, 'I').replace(/[^A-Z]/g, '');\n    let pairs = [];\n    const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"; \n    \n    for (let i = 0; i < text.length; i += 2) {\n        let pair = text[i];\n        \n        if (i + 1 < text.length) { \n            if (text[i] === text[i + 1]) {\n                if (text[i] === 'X') {\n\n                    pair += text.includes('Z') ? chooseAlternateLetter(text) : 'Z';\n                } else {\n                    pair += 'X';\n                }\n                i--; \n            } \n            else {\n                pair += text[i + 1];\n            }\n        } \n        else {\n            pair += text[i] === 'X' ? (text.includes('Z') ? chooseAlternateLetter(text) : 'Z') : 'X'; \n        }\n        \n        pairs.push(pair);\n    }\n//console.log(pairs)\n    return pairs;\n}\n\nfunction chooseAlternateLetter(text) {\n\n    const alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"; \n    \n    for (let char of alphabet) {\n         if (!text.includes(char)) {\n            return char;\n        }\n    }\n     return 'X';\n}\n\n\nfunction findPosition(letter, matrix) {\n    for (let row = 0; row < matrix.length; row++) {\n\n         for (let col = 0; col < matrix[row].length; col++)\n             {\n            if (matrix[row][col] === letter) {\n                return { row, col };\n            }\n        }\n    }\n    return null;\n}\n\nexport function playfairEncrypt(text, key) {\n    const matrix = createMatrix(key);\n    const pairs = prepareText(text);\n    let encryptedText = '';\n    let steps = [\n        '1- Construct a 5x5 matrix.',\n        '2- Sort the key in the matrix and fill with remaining letters.',\n        '3- Group plaintext into pairs: ' + pairs.join(', ')\n    ];\n\n    pairs.forEach(pair => {\n        const pos1 = findPosition(pair[0], matrix);\n\n        const pos2 = findPosition(pair[1], matrix);\n        let result = '';\n\n        if (pos1.row === pos2.row) {\n\n            result = matrix[pos1.row][(pos1.col + 1) % 5] + matrix[pos2.row][(pos2.col + 1) % 5];\n\n             steps.push(`Encrypt pair ${pair}: Same row, move right -> ${result}`);\n        }\n         else if (pos1.col === pos2.col) {\n            result = matrix[(pos1.row + 1) % 5][pos1.col] + matrix[(pos2.row + 1) % 5][pos2.col];\n            steps.push(`Encrypt pair ${pair}: Same column, move below -> ${result}`);\n        }\n         else {\n            result = matrix[pos1.row][pos2.col] + matrix[pos2.row][pos1.col];\n            steps.push(`Encrypt pair ${pair}: Different row and column, rectangle swap -> ${result}`);\n        }\n\n        //console.log(result)\n\n        encryptedText += result;\n    });\n\n    steps.push('4- Perform encryption using the following rules: Same row: move right, Same column: move below, Different row and column: rectangle swap.');\n    return { encryptedText, matrix, steps };\n}\n\nexport function playfairDecrypt(text, key) {\n    const matrix = createMatrix(key);\n    const pairs = prepareText(text);\n    let decryptedText = '';\n    let steps = [\n        '1- Construct a 5x5 matrix.',\n        '2- Sort the key in the matrix and fill with remaining letters.',\n        '3- Group ciphertext into pairs: ' + pairs.join(', ')\n    ];\n\n    pairs.forEach(pair => {\n        const pos1 = findPosition(pair[0], matrix);\n\n         const pos2 = findPosition(pair[1], matrix);\n         let result = '';\n\n        if (pos1.row === pos2.row) {\n            result = matrix[pos1.row][(pos1.col + 4) % 5] + matrix[pos2.row][(pos2.col + 4) % 5];\n            steps.push(`Decrypt pair ${pair}: Same row, move left -> ${result}`);\n        }\n         else if (pos1.col === pos2.col) {\n            result = matrix[(pos1.row + 4) % 5][pos1.col] + matrix[(pos2.row + 4) % 5][pos2.col];\n            steps.push(`Decrypt pair ${pair}: Same column, move above -> ${result}`);\n        }\n         else {\n            result = matrix[pos1.row][pos2.col] + matrix[pos2.row][pos1.col];\n\n            steps.push(`Decrypt pair ${pair}: Different row and column, rectangle swap -> ${result}`);\n        }\n        //console.log(result)\n        decryptedText += result;\n    });\n\n    steps.push('4- Perform decryption using the following rules: Same row: move left, Same column: move above, Different row and column: rectangle swap.');\n    return { decryptedText, matrix, steps };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}