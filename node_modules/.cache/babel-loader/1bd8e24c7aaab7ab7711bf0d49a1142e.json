{"ast":null,"code":"function modpow(base, pow, mod) {\n  let result = 1;\n  base %= mod;\n  while (pow > 0) {\n    if (pow % 2 === 1) {\n      result = result * base % mod;\n    }\n    pow = Math.floor(pow / 2);\n    base = base * base % mod;\n  }\n  return result;\n}\nfunction modInverse(a, m) {\n  let A = Math.max(m, a);\n  let B = Math.min(m, a);\n  let q = Math.floor(A / B);\n  let R = A % B;\n  let T1 = 0;\n  let T2 = 1;\n  let T = T1 - T2 * q;\n  while (R !== 0) {\n    A = B;\n    B = R;\n    q = Math.floor(A / B);\n    R = A % B;\n    T1 = T2;\n    T2 = T;\n    T = T1 - T2 * q;\n  }\n  if (T2 < 0)\n    // If T2 is negative, add m to it and return the result\n    return T2 + m;else return T2;\n}\n\n//Step 3 of ElGamal Encryption\nexport function elGamalEncrypt(plaintext, p, g, h, k) {\n  //Calcualte K = y^k mod p\n  const K = modpow(h, k, p);\n  //Calculate c1 = g * k mod p\n  const c1 = modpow(g, k, p);\n  //Calculate c2 = m * K mod p\n  const c2 = Number(plaintext) * K % p;\n  return {\n    c1,\n    c2\n  }; // Return ciphertext as an object\n}\nexport function elGamalDecrypt(p, x, c1, c2) {\n  const newK = modpow(c1, x, p);\n  const KInverse = modInverse(newK, p); // K^-1 mod p\n  const m = c2 * KInverse % p;\n  return m.toString(); // Return decrypted plaintext\n}","map":{"version":3,"names":["modpow","base","pow","mod","result","Math","floor","modInverse","a","m","A","max","B","min","q","R","T1","T2","T","elGamalEncrypt","plaintext","p","g","h","k","K","c1","c2","Number","elGamalDecrypt","x","newK","KInverse","toString"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/algorithms/elgamal.js"],"sourcesContent":["function modpow(base, pow, mod) {\n    let result = 1;\n    base %= mod;\n    while (pow> 0) {\n        if (pow % 2 === 1) {\n            result = (result * base) % mod;\n        }\n        pow = Math.floor(pow / 2);\n        base = (base * base) % mod;\n    }\n    return result;\n}\n\nfunction modInverse(a, m) {\n\n    let A = Math.max(m,a);\n    let B = Math.min(m,a);\n    let q = Math.floor(A / B);\n    let R = A % B;\n    let T1= 0;\n    let T2 = 1;\n    let T = T1 - ( T2 * q);\n\n    while (R !== 0){\n        A = B;\n        B = R;\n        q = Math.floor(A / B);\n        R = A % B;\n        T1 = T2;\n        T2 = T;\n        T = T1 - ( T2 * q);\n    }\n\n    if (T2 < 0)\n        // If T2 is negative, add m to it and return the result\n        return (T2 + m );\n    else\n        return T2;\n}\n\n\n//Step 3 of ElGamal Encryption\nexport function elGamalEncrypt(plaintext, p, g ,h , k) {\n    //Calcualte K = y^k mod p\n    const K = modpow(h, k, p); \n    //Calculate c1 = g * k mod p\n    const c1 = modpow(g, k, p); \n    //Calculate c2 = m * K mod p\n    const c2 = (Number(plaintext) * K) % p;\n\n    return { c1, c2 }; // Return ciphertext as an object\n}\n\n\nexport function elGamalDecrypt(p, x,c1,c2) {\n    const newK = modpow(c1,x,p); \n    const KInverse = modInverse(newK, p); // K^-1 mod p\n    const m = c2 * KInverse % p;\n\n    return m.toString(); // Return decrypted plaintext\n}"],"mappings":"AAAA,SAASA,MAAMA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC5B,IAAIC,MAAM,GAAG,CAAC;EACdH,IAAI,IAAIE,GAAG;EACX,OAAOD,GAAG,GAAE,CAAC,EAAE;IACX,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;MACfE,MAAM,GAAIA,MAAM,GAAGH,IAAI,GAAIE,GAAG;IAClC;IACAD,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,GAAG,CAAC,CAAC;IACzBD,IAAI,GAAIA,IAAI,GAAGA,IAAI,GAAIE,GAAG;EAC9B;EACA,OAAOC,MAAM;AACjB;AAEA,SAASG,UAAUA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAEtB,IAAIC,CAAC,GAAGL,IAAI,CAACM,GAAG,CAACF,CAAC,EAACD,CAAC,CAAC;EACrB,IAAII,CAAC,GAAGP,IAAI,CAACQ,GAAG,CAACJ,CAAC,EAACD,CAAC,CAAC;EACrB,IAAIM,CAAC,GAAGT,IAAI,CAACC,KAAK,CAACI,CAAC,GAAGE,CAAC,CAAC;EACzB,IAAIG,CAAC,GAAGL,CAAC,GAAGE,CAAC;EACb,IAAII,EAAE,GAAE,CAAC;EACT,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,CAAC,GAAGF,EAAE,GAAKC,EAAE,GAAGH,CAAE;EAEtB,OAAOC,CAAC,KAAK,CAAC,EAAC;IACXL,CAAC,GAAGE,CAAC;IACLA,CAAC,GAAGG,CAAC;IACLD,CAAC,GAAGT,IAAI,CAACC,KAAK,CAACI,CAAC,GAAGE,CAAC,CAAC;IACrBG,CAAC,GAAGL,CAAC,GAAGE,CAAC;IACTI,EAAE,GAAGC,EAAE;IACPA,EAAE,GAAGC,CAAC;IACNA,CAAC,GAAGF,EAAE,GAAKC,EAAE,GAAGH,CAAE;EACtB;EAEA,IAAIG,EAAE,GAAG,CAAC;IACN;IACA,OAAQA,EAAE,GAAGR,CAAC,CAAG,KAEjB,OAAOQ,EAAE;AACjB;;AAGA;AACA,OAAO,SAASE,cAAcA,CAACC,SAAS,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAGC,CAAC,EAAE;EACnD;EACA,MAAMC,CAAC,GAAGzB,MAAM,CAACuB,CAAC,EAAEC,CAAC,EAAEH,CAAC,CAAC;EACzB;EACA,MAAMK,EAAE,GAAG1B,MAAM,CAACsB,CAAC,EAAEE,CAAC,EAAEH,CAAC,CAAC;EAC1B;EACA,MAAMM,EAAE,GAAIC,MAAM,CAACR,SAAS,CAAC,GAAGK,CAAC,GAAIJ,CAAC;EAEtC,OAAO;IAAEK,EAAE;IAAEC;EAAG,CAAC,CAAC,CAAC;AACvB;AAGA,OAAO,SAASE,cAAcA,CAACR,CAAC,EAAES,CAAC,EAACJ,EAAE,EAACC,EAAE,EAAE;EACvC,MAAMI,IAAI,GAAG/B,MAAM,CAAC0B,EAAE,EAACI,CAAC,EAACT,CAAC,CAAC;EAC3B,MAAMW,QAAQ,GAAGzB,UAAU,CAACwB,IAAI,EAAEV,CAAC,CAAC,CAAC,CAAC;EACtC,MAAMZ,CAAC,GAAGkB,EAAE,GAAGK,QAAQ,GAAGX,CAAC;EAE3B,OAAOZ,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module"}