{"ast":null,"code":"class AES {\n  constructor(key) {\n    this.sBox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    this.invSBox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n    this.rCon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.key = key;\n    this.roundKeys = this.keyExpansion(key);\n  }\n  encrypt(input, key) {\n    const steps = [];\n    let state = this.createState(input);\n    steps.push({\n      title: \"Initial State\",\n      state: this.cloneState(state),\n      description: \"Input block arranged in 4x4 matrix\"\n    });\n    const expandedKeys = this.keyExpansion(key);\n\n    // Initial round\n    state = this.addRoundKey(state, this.getKey(expandedKeys, 0));\n    steps.push({\n      title: \"Initial AddRoundKey\",\n      state: this.cloneState(state),\n      description: \"XOR with initial round key\"\n    });\n\n    // Main rounds\n    for (let round = 1; round < 10; round++) {\n      state = this.subBytes(state);\n      steps.push({\n        title: `Round ${round} - SubBytes`,\n        state: this.cloneState(state),\n        description: \"Byte substitution using S-box\"\n      });\n      state = this.shiftRows(state);\n      steps.push({\n        title: `Round ${round} - ShiftRows`,\n        state: this.cloneState(state),\n        description: \"Circular left shift of rows\"\n      });\n      state = this.mixColumns(state);\n      steps.push({\n        title: `Round ${round} - MixColumns`,\n        state: this.cloneState(state),\n        description: \"Column mixing transformation\"\n      });\n      state = this.addRoundKey(state, this.getKey(expandedKeys, round));\n      steps.push({\n        title: `Round ${round} - AddRoundKey`,\n        state: this.cloneState(state),\n        description: `XOR with round ${round} key`\n      });\n    }\n\n    // Final round\n    state = this.subBytes(state);\n    steps.push({\n      title: \"Final Round - SubBytes\",\n      state: this.cloneState(state),\n      description: \"Final byte substitution\"\n    });\n    state = this.shiftRows(state);\n    steps.push({\n      title: \"Final Round - ShiftRows\",\n      state: this.cloneState(state),\n      description: \"Final row shifting\"\n    });\n    state = this.addRoundKey(state, this.getKey(expandedKeys, 10));\n    steps.push({\n      title: \"Final Round - AddRoundKey\",\n      state: this.cloneState(state),\n      description: \"XOR with final round key\"\n    });\n    return {\n      ciphertext: this.flattenState(state),\n      steps\n    };\n  }\n\n  // Helper methods for state management\n  createState(input) {\n    const state = [];\n    for (let i = 0; i < 4; i++) {\n      state[i] = input.slice(i * 4, (i + 1) * 4);\n    }\n    return state;\n  }\n  cloneState(state) {\n    return state.map(row => [...row]);\n  }\n  flattenState(state) {\n    return state.reduce((flat, row) => [...flat, ...row], []);\n  }\n  getKey(expandedKeys, round) {\n    return expandedKeys.slice(round * 16, (round + 1) * 16);\n  }\n  subBytes(state, sBox) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        state[i][j] = sBox[state[i][j]];\n      }\n    }\n  }\n  shiftRows(state) {\n    for (let i = 1; i < 4; i++) {\n      // performing a circular left shift on each row by i positions\n      // state[1] = [1, 2, 3, 4]\n      // state[1].slice(1) = [2, 3, 4]\n      // state[1].slice(0, 1) = [1]\n      // state[1] = [2, 3, 4, 1]\n      state[i] = state[i].slice(i).concat(state[i].slice(0, i));\n    }\n  }\n  invShiftRows(state) {\n    for (let i = 1; i < 4; i++) {\n      // performing a circular right shift on each row by i positions\n      // state[1] = [1, 2, 3, 4]\n      // state[1].slice(-i) = [4]\n      // state[1].slice(0, -i) = [1, 2, 3]\n      // state[1] = [4, 1, 2, 3]\n      state[i] = state[i].slice(-i).concat(state[i].slice(0, -i));\n    }\n  }\n  mixColumns(state) {\n    // masking with 0xFF to ensure the result is a byte\n    // xoring with 0x1B if the most significant bit is ON to avoid overflow\n    const mul2 = x => x << 1 & 0xff ^ (x & 1 << 7 ? 0x1b : 0);\n    const mul3 = x => mul2(x) ^ x;\n    let newState = [];\n    for (let c = 0; c < 4; c++) {\n      // Process each column\n      newState[c] = [mul2(state[0][c]) ^ mul3(state[1][c]) ^ state[2][c] ^ state[3][c], state[0][c] ^ mul2(state[1][c]) ^ mul3(state[2][c]) ^ state[3][c], state[0][c] ^ state[1][c] ^ mul2(state[2][c]) ^ mul3(state[3][c]), mul3(state[0][c]) ^ state[1][c] ^ state[2][c] ^ mul2(state[3][c])];\n    }\n    return newState;\n  }\n  invMixColumns(state) {\n    const mul2 = x => x << 1 & 0xff ^ (x & 1 << 7 ? 0x1b : 0);\n    const mul9 = x => mul2(mul2(mul2(x))) ^ x;\n    const mul11 = x => mul2(mul2(mul2(x)) ^ x) ^ x;\n    const mul13 = x => mul2(mul2(mul2(x) ^ x)) ^ x;\n    const mul14 = x => mul2(mul2(mul2(x) ^ x) ^ x);\n    let newState = [];\n    for (let c = 0; c < 4; c++) {\n      newState[c] = [mul14(state[0][c]) ^ mul11(state[1][c]) ^ mul13(state[2][c]) ^ mul9(state[3][c]), mul9(state[0][c]) ^ mul14(state[1][c]) ^ mul11(state[2][c]) ^ mul13(state[3][c]), mul13(state[0][c]) ^ mul9(state[1][c]) ^ mul14(state[2][c]) ^ mul11(state[3][c]), mul11(state[0][c]) ^ mul13(state[1][c]) ^ mul9(state[2][c]) ^ mul14(state[3][c])];\n    }\n    return newState;\n  }\n  addRoundKey(state, roundKey) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        // accessing the round key in column-wise order\n        state[i][j] ^= roundKey[i + 4 * j];\n      }\n    }\n  }\n  keyExpansion(key) {\n    const keyWords = [];\n    const expandedKeys = [];\n\n    // extracting the first 4 words\n    for (let i = 0; i < 4; i++) {\n      keyWords[i] = key.slice(4 * i, 4 * i + 4);\n    }\n\n    // Generate the remaining round keys\n    for (let i = 4; i < 44; i++) {\n      let temp = [...keyWords[i - 1]];\n      if (i % 4 === 0) {\n        temp = this.keyExpansionCore(temp, i / 4);\n      }\n      keyWords[i] = this.xorWords(keyWords[i - 4], temp);\n    }\n\n    // Flatten keyWords into expandedKeys array\n    for (let i = 0; i < 44; i++) {\n      expandedKeys.push(...keyWords[i]);\n    }\n    console.log(expandedKeys.map(byte => byte.toString(16).padStart(2, \"0\")).join(\" \"));\n    return expandedKeys;\n  }\n  keyExpansionCore(word, iteration) {\n    // Rot nibble, like pop_front and push_back\n    word.push(word.shift());\n\n    // Sub nibble\n    for (let i = 0; i < 4; i++) {\n      word[i] = this.sBox[word[i]];\n    }\n    console.log(word[0].toString(16).padStart(2, \"0\"));\n\n    // XOR the first byte with the round constant\n    word[0] ^= this.rCon[iteration - 1];\n    return word;\n  }\n  xorWords(word1, word2) {\n    return word1.map((byte, index) => byte ^ word2[index]);\n  }\n  encrypt(plaintext) {\n    let state = this.createStateMatrix(plaintext);\n    console.log(state.map(row => row.map(byte => byte.toString(16).padStart(2, \"0\")).join(\" \")));\n    this.addRoundKey(state, this.roundKeys.slice(0, 16));\n    for (let round = 1; round < 10; round++) {\n      this.subBytes(state, this.sBox);\n      this.shiftRows(state);\n      this.mixColumns(state);\n      this.addRoundKey(state, this.roundKeys.slice(round * 16, (round + 1) * 16));\n      console.log(state.map(row => row.map(byte => byte.toString(16).padStart(2, \"0\")).join(\" \")));\n    }\n    this.subBytes(state, this.sBox);\n    this.shiftRows(state);\n    this.addRoundKey(state, this.roundKeys.slice(160));\n    return this.stateToCipherText(state);\n  }\n  stateToCipherText(state) {\n    // Convert the state matrix to column-wise order\n    const cipherText = [];\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        cipherText.push(state[row][col]);\n      }\n    }\n    return cipherText;\n  }\n  cipherTextToState(cipherText) {\n    const state = [];\n    for (let row = 0; row < 4; row++) {\n      state[row] = [];\n      for (let col = 0; col < 4; col++) {\n        state[row][col] = cipherText[col * 4 + row];\n      }\n    }\n    return state;\n  }\n  decrypt(ciphertext) {\n    let state = this.cipherTextToState(ciphertext);\n    console.log(state.map(row => row.map(byte => byte.toString(16).padStart(2, \"0\")).join(\" \")));\n\n    // Reverse the encryption process\n\n    // Round 10\n    this.addRoundKey(state, this.roundKeys.slice(160));\n\n    // Rounds 9 to 1\n    for (let round = 9; round > 0; round--) {\n      this.invShiftRows(state);\n      this.subBytes(state, this.invSBox);\n      this.addRoundKey(state, this.roundKeys.slice(round * 16, (round + 1) * 16));\n      this.invMixColumns(state);\n    }\n\n    // Round 0\n    this.invShiftRows(state);\n    this.subBytes(state, this.invSBox);\n    this.addRoundKey(state, this.roundKeys.slice(0, 16));\n    return this.stateToCipherText(state);\n  }\n  createStateMatrix(input) {\n    let state = [];\n    for (let i = 0; i < 4; i++) {\n      state[i] = [];\n      for (let j = 0; j < 4; j++) {\n        state[i][j] = input[i + 4 * j];\n      }\n    }\n    return state;\n  }\n}\nexport default AES;","map":{"version":3,"names":["AES","constructor","key","sBox","invSBox","rCon","roundKeys","keyExpansion","encrypt","input","steps","state","createState","push","title","cloneState","description","expandedKeys","addRoundKey","getKey","round","subBytes","shiftRows","mixColumns","ciphertext","flattenState","i","slice","map","row","reduce","flat","j","concat","invShiftRows","mul2","x","mul3","newState","c","invMixColumns","mul9","mul11","mul13","mul14","roundKey","keyWords","temp","keyExpansionCore","xorWords","console","log","byte","toString","padStart","join","word","iteration","shift","word1","word2","index","plaintext","createStateMatrix","stateToCipherText","cipherText","col","cipherTextToState","decrypt"],"sources":["C:/Users/Ahmed Sehly/Downloads/cipherPlain-main/cipherPlain-main/src/algorithms/AES/aes_class.js"],"sourcesContent":["class AES {\n  constructor(key) {\n    this.sBox = [\n      0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,\n      0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,\n      0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,\n      0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,\n      0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,\n      0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,\n      0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,\n      0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,\n      0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,\n      0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,\n      0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,\n      0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,\n      0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,\n      0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,\n      0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,\n      0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,\n      0xb0, 0x54, 0xbb, 0x16,\n    ];\n\n    this.invSBox = [\n      0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,\n      0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,\n      0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,\n      0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n      0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49,\n      0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,\n      0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,\n      0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n      0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,\n      0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,\n      0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,\n      0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n      0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,\n      0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,\n      0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,\n      0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n      0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59,\n      0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,\n      0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,\n      0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n      0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,\n      0x55, 0x21, 0x0c, 0x7d,\n    ];\n\n    this.rCon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.key = key;\n    this.roundKeys = this.keyExpansion(key);\n  }\n  encrypt(input, key) {\n    const steps = [];\n    let state = this.createState(input);\n\n    steps.push({\n      title: \"Initial State\",\n      state: this.cloneState(state),\n      description: \"Input block arranged in 4x4 matrix\",\n    });\n\n    const expandedKeys = this.keyExpansion(key);\n\n    // Initial round\n    state = this.addRoundKey(state, this.getKey(expandedKeys, 0));\n    steps.push({\n      title: \"Initial AddRoundKey\",\n      state: this.cloneState(state),\n      description: \"XOR with initial round key\",\n    });\n\n    // Main rounds\n    for (let round = 1; round < 10; round++) {\n      state = this.subBytes(state);\n      steps.push({\n        title: `Round ${round} - SubBytes`,\n        state: this.cloneState(state),\n        description: \"Byte substitution using S-box\",\n      });\n\n      state = this.shiftRows(state);\n      steps.push({\n        title: `Round ${round} - ShiftRows`,\n        state: this.cloneState(state),\n        description: \"Circular left shift of rows\",\n      });\n\n      state = this.mixColumns(state);\n      steps.push({\n        title: `Round ${round} - MixColumns`,\n        state: this.cloneState(state),\n        description: \"Column mixing transformation\",\n      });\n\n      state = this.addRoundKey(state, this.getKey(expandedKeys, round));\n      steps.push({\n        title: `Round ${round} - AddRoundKey`,\n        state: this.cloneState(state),\n        description: `XOR with round ${round} key`,\n      });\n    }\n\n    // Final round\n    state = this.subBytes(state);\n    steps.push({\n      title: \"Final Round - SubBytes\",\n      state: this.cloneState(state),\n      description: \"Final byte substitution\",\n    });\n\n    state = this.shiftRows(state);\n    steps.push({\n      title: \"Final Round - ShiftRows\",\n      state: this.cloneState(state),\n      description: \"Final row shifting\",\n    });\n\n    state = this.addRoundKey(state, this.getKey(expandedKeys, 10));\n    steps.push({\n      title: \"Final Round - AddRoundKey\",\n      state: this.cloneState(state),\n      description: \"XOR with final round key\",\n    });\n\n    return { ciphertext: this.flattenState(state), steps };\n  }\n\n  // Helper methods for state management\n  createState(input) {\n    const state = [];\n    for (let i = 0; i < 4; i++) {\n      state[i] = input.slice(i * 4, (i + 1) * 4);\n    }\n    return state;\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  flattenState(state) {\n    return state.reduce((flat, row) => [...flat, ...row], []);\n  }\n\n  getKey(expandedKeys, round) {\n    return expandedKeys.slice(round * 16, (round + 1) * 16);\n  }\n\n  subBytes(state, sBox) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        state[i][j] = sBox[state[i][j]];\n      }\n    }\n  }\n\n  shiftRows(state) {\n    for (let i = 1; i < 4; i++) {\n      // performing a circular left shift on each row by i positions\n      // state[1] = [1, 2, 3, 4]\n      // state[1].slice(1) = [2, 3, 4]\n      // state[1].slice(0, 1) = [1]\n      // state[1] = [2, 3, 4, 1]\n      state[i] = state[i].slice(i).concat(state[i].slice(0, i));\n    }\n  }\n\n  invShiftRows(state) {\n    for (let i = 1; i < 4; i++) {\n      // performing a circular right shift on each row by i positions\n      // state[1] = [1, 2, 3, 4]\n      // state[1].slice(-i) = [4]\n      // state[1].slice(0, -i) = [1, 2, 3]\n      // state[1] = [4, 1, 2, 3]\n      state[i] = state[i].slice(-i).concat(state[i].slice(0, -i));\n    }\n  }\n\n  mixColumns(state) {\n    // masking with 0xFF to ensure the result is a byte\n    // xoring with 0x1B if the most significant bit is ON to avoid overflow\n    const mul2 = (x) => ((x << 1) & 0xff) ^ (x & (1 << 7) ? 0x1b : 0);\n    const mul3 = (x) => mul2(x) ^ x;\n\n    let newState = [];\n\n    for (let c = 0; c < 4; c++) {\n      // Process each column\n      newState[c] = [\n        mul2(state[0][c]) ^ mul3(state[1][c]) ^ state[2][c] ^ state[3][c],\n        state[0][c] ^ mul2(state[1][c]) ^ mul3(state[2][c]) ^ state[3][c],\n        state[0][c] ^ state[1][c] ^ mul2(state[2][c]) ^ mul3(state[3][c]),\n        mul3(state[0][c]) ^ state[1][c] ^ state[2][c] ^ mul2(state[3][c]),\n      ];\n    }\n\n    return newState;\n  }\n\n  invMixColumns(state) {\n    const mul2 = (x) => ((x << 1) & 0xff) ^ (x & (1 << 7) ? 0x1b : 0);\n    const mul9 = (x) => mul2(mul2(mul2(x))) ^ x;\n    const mul11 = (x) => mul2(mul2(mul2(x)) ^ x) ^ x;\n    const mul13 = (x) => mul2(mul2(mul2(x) ^ x)) ^ x;\n    const mul14 = (x) => mul2(mul2(mul2(x) ^ x) ^ x);\n\n    let newState = [];\n\n    for (let c = 0; c < 4; c++) {\n      newState[c] = [\n        mul14(state[0][c]) ^\n          mul11(state[1][c]) ^\n          mul13(state[2][c]) ^\n          mul9(state[3][c]),\n        mul9(state[0][c]) ^\n          mul14(state[1][c]) ^\n          mul11(state[2][c]) ^\n          mul13(state[3][c]),\n        mul13(state[0][c]) ^\n          mul9(state[1][c]) ^\n          mul14(state[2][c]) ^\n          mul11(state[3][c]),\n        mul11(state[0][c]) ^\n          mul13(state[1][c]) ^\n          mul9(state[2][c]) ^\n          mul14(state[3][c]),\n      ];\n    }\n\n    return newState;\n  }\n\n  addRoundKey(state, roundKey) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        // accessing the round key in column-wise order\n        state[i][j] ^= roundKey[i + 4 * j];\n      }\n    }\n  }\n\n  keyExpansion(key) {\n    const keyWords = [];\n    const expandedKeys = [];\n\n    // extracting the first 4 words\n    for (let i = 0; i < 4; i++) {\n      keyWords[i] = key.slice(4 * i, 4 * i + 4);\n    }\n\n    // Generate the remaining round keys\n    for (let i = 4; i < 44; i++) {\n      let temp = [...keyWords[i - 1]];\n      if (i % 4 === 0) {\n        temp = this.keyExpansionCore(temp, i / 4);\n      }\n      keyWords[i] = this.xorWords(keyWords[i - 4], temp);\n    }\n\n    // Flatten keyWords into expandedKeys array\n    for (let i = 0; i < 44; i++) {\n      expandedKeys.push(...keyWords[i]);\n    }\n\n    console.log(\n      expandedKeys.map((byte) => byte.toString(16).padStart(2, \"0\")).join(\" \")\n    );\n\n    return expandedKeys;\n  }\n\n  keyExpansionCore(word, iteration) {\n    // Rot nibble, like pop_front and push_back\n    word.push(word.shift());\n\n    // Sub nibble\n    for (let i = 0; i < 4; i++) {\n      word[i] = this.sBox[word[i]];\n    }\n    console.log(word[0].toString(16).padStart(2, \"0\"));\n\n    // XOR the first byte with the round constant\n    word[0] ^= this.rCon[iteration - 1];\n\n    return word;\n  }\n\n  xorWords(word1, word2) {\n    return word1.map((byte, index) => byte ^ word2[index]);\n  }\n\n  encrypt(plaintext) {\n    let state = this.createStateMatrix(plaintext);\n    console.log(\n      state.map((row) =>\n        row.map((byte) => byte.toString(16).padStart(2, \"0\")).join(\" \")\n      )\n    );\n\n    this.addRoundKey(state, this.roundKeys.slice(0, 16));\n\n    for (let round = 1; round < 10; round++) {\n      this.subBytes(state, this.sBox);\n      this.shiftRows(state);\n      this.mixColumns(state);\n      this.addRoundKey(\n        state,\n        this.roundKeys.slice(round * 16, (round + 1) * 16)\n      );\n      console.log(\n        state.map((row) =>\n          row.map((byte) => byte.toString(16).padStart(2, \"0\")).join(\" \")\n        )\n      );\n    }\n\n    this.subBytes(state, this.sBox);\n    this.shiftRows(state);\n    this.addRoundKey(state, this.roundKeys.slice(160));\n\n    return this.stateToCipherText(state);\n  }\n\n  stateToCipherText(state) {\n    // Convert the state matrix to column-wise order\n    const cipherText = [];\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        cipherText.push(state[row][col]);\n      }\n    }\n    return cipherText;\n  }\n\n  cipherTextToState(cipherText) {\n    const state = [];\n    for (let row = 0; row < 4; row++) {\n      state[row] = [];\n      for (let col = 0; col < 4; col++) {\n        state[row][col] = cipherText[col * 4 + row];\n      }\n    }\n    return state;\n  }\n\n  decrypt(ciphertext) {\n    let state = this.cipherTextToState(ciphertext);\n    console.log(\n      state.map((row) =>\n        row.map((byte) => byte.toString(16).padStart(2, \"0\")).join(\" \")\n      )\n    );\n\n    // Reverse the encryption process\n\n    // Round 10\n    this.addRoundKey(state, this.roundKeys.slice(160));\n\n    // Rounds 9 to 1\n    for (let round = 9; round > 0; round--) {\n      this.invShiftRows(state);\n      this.subBytes(state, this.invSBox);\n      this.addRoundKey(\n        state,\n        this.roundKeys.slice(round * 16, (round + 1) * 16)\n      );\n      this.invMixColumns(state);\n    }\n\n    // Round 0\n    this.invShiftRows(state);\n    this.subBytes(state, this.invSBox);\n    this.addRoundKey(state, this.roundKeys.slice(0, 16));\n\n    return this.stateToCipherText(state);\n  }\n\n  createStateMatrix(input) {\n    let state = [];\n    for (let i = 0; i < 4; i++) {\n      state[i] = [];\n      for (let j = 0; j < 4; j++) {\n        state[i][j] = input[i + 4 * j];\n      }\n    }\n    return state;\n  }\n}\n\nexport default AES;\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,GAAG,EAAE;IACf,IAAI,CAACC,IAAI,GAAG,CACV,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACvB;IAED,IAAI,CAACC,OAAO,GAAG,CACb,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,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","ignoreList":[]},"metadata":{},"sourceType":"module"}